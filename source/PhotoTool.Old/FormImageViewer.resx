<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAGABoAwAAJgAAACAgAAABABgAqAwAAI4DAAAoAAAAEAAAACAAAAABABgAAAAAAEAD
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAABAAABEAABAAAA8AAA4AAA0AAAsAAAoAAAkAAAkAAAgAAAcA
        AAQBAAMBAAAAv9qzud+tt+Sst+Szt+a4t+a/t+fDt+fKtunOturTturYt+zfvezjyOvnAAQBAAAAuN+o
        seehruygreymrO6tqu61q+67qe7BqO/HqO7Ppu/VqPDcru7ive3nAAUDAAAAt96mteSlsuilsuissumy
        sem4sem+r+vDr+vJsOvPruzWruzasuzhvezpAAUEAAAAvNuuAAsAAAgAAAcAAAcAAAcAAAYAAAUAAAUA
        AAUAAAQAAAUAAAUBx+zqAAYFAAAAv9iyAAQAbGpqbWtqa2lobGhnBwMCBgQEODY2bWtra2lpZ2hmAAIA
        yurpAAUEAAAAv9iyAAQAcG5uamxmcnNqBAEAKSgkAAEAAQIAaGZla2lobm5uAAEByurpAAUEAAAAv9iy
        AAQAamhobW1nbW5lBAIAVVVPBgcDBgcFbmxrc3Fxbm5uAAEByurpAAUEAAAAv9iyAAQAc25va2hkcW5p
        OTcvMC0oKiklCwkIc3FxbWtraWlpAAEByurpAAUEAAAAv9mxAAUAc3JuZmtiZWtgbnFoOz41Ojw2aGxn
        Zm1qZ3JvYG5qAAMAyOrpAAUEAAAAv9uwAA4AAAoAAA0AAAwAAA0AAAgAAAQAAAcAAA8CABUHAA4EAAYA
        w+vpAAUEAAAAutytjaqDAA8Ahq6FuuO9jbGTAAwAAAoAia+duOnTtOzXtezdue7kv+zpAAUEAAAAt+Cn
        s+aisOqjreupruywruy4rOy+quvEqe3Kpu/Ppe/VpvDeq+/kuu3pAAUEAAAAuN+oseehruygreymrO2v
        qu61qe68qO/EqO7Jpu/Ppu/VpvDere/kve3nAAUDAAAAvtmyud+ttuOrt+Szt+a4tuW+t+fDtujKtunO
        turTturZt+zfvezjyuzmAAQBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACgAAAAgAAAAQAAAAAEAGAAAAAAAgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAEQAA
        FAAAEgAAEgAAEQAAEQAAEAAAEAAADwAADwAADgAADgAADQAADQAADQAADAAADAAACwAACgAACQAACQAA
        CAAACAAABwAABwAABwEABgMABQMAAwMAAgMAAAC92K253qa55KW346a25Km35Ky25K+15bG25bS25ra3
        5bq25ry157+258G16MO26Ma46sy26c236dG46tK36ta26ti369q269236+G37OO27OW07Oe77OrK7OwA
        AwMAAAC33aOy55ev7JSu7Zet7Zuu7J6t7KKt7aWs7aiq7aqq7a+o7LGp7rWp77qn7ryo7r+o78So7smp
        78up79Cn79Gm79Wm79ml8Num79+l7+Ok7+ej8Oms7+y97e4ABAQAAAC24Z6u65Cr8Yyq8ZCq8ZSp8Zeo
        8Zun8Z+l8KKm8aWl8amk8a2i8LCj8bSi8bih8byj8sGi8cai8cqh8cye8tCd8dSd8dic8dud8d+c8eOb
        8eeb8euj8O247u4ABQYAAAC24Z6u65Cr8Yyq8ZCr8pWp8Zeo8Zun8Z+m8aOm8ael8aqk8a2j8bGj8bSi
        8bih8byi8cCi8cai8cqh8cye8tCd8dSd8dic8dud8d+c8eOb8eeb8emj8Oy47u4ABAYAAAC24Z6u65Ct
        8I2u7pWt7Zus7Z6r7KGr7aWq7air7ayq7a+p7rGp7rWq7rmp7ryo7r+o78Sp78ep78uo786n79Gm79Wm
        79mn79um79+l7+Oh8Oec8Ouj8Oy47u4ABQcAAAC24Z6v6o+v7pKz56G05Kmz5Ky05a+05bG15rS25ra1
        5ri057u1572258G16MO26Ma36cm26sy1686069C069K46ti369q469236+G26+Kv7eeg8Ouj8O247u4A
        BQYAAAC24J+16Ji06JsAEwAAFAAAFAAAFgAADwAAGAAADgAADgAADwAAEAAACwAACgAACgAACgAACQAA
        FAEAEAAADwAABwAABwAABwAABwAABgAABwGs7+qq7+y67u4ABQYAAAC43qS84qYAEwADFwAABwALFxEA
        BAAABAAABgAADAYBDwkACAIAAwACDggABAAABQAABgAACAAABQAABAAABAAACAAACQEACQEADQIABQAA
        DgUAEQm07um97uwABQYAAAC53KS94a0AEwAABwAABQjGyc4AAAXT09kAAAa6vcEEBwvJys4FBwjHxsgA
        AAHV09MCAADb1tcMCAfKxsUFAQDe3dkNDwnP080ABwDI0ccAEwoAFAm87+e/7uwABQYAAAC43aW536sF
        IgADDwPN0NQHBQvU0NYTDBPTz9QDAALS0NAMCgrHwsMFAgQLCAoHAgQNCAoHAAPW0NELAwPTy8sGAQDM
        yMcEAgHDxsQAAwAACAEADAS97efB7ewABQYAAAC43aW43qoAEQAABQADBQbHw8gOBwzOx8oIAgPU0M8H
        AwLLx8YRDQwEAAAEAAAJBAYEAAEFAAEGAAHQyMgZERHPx8cVEA/V0NEEBQPi5eMADAUAEgq97efB7ewA
        BQYAAAC43aW43qoAFAADEALQ0NAFAALa0tMbFBHEwLsGAwDr6+UHBgIAAQACAQACAQACAAACAAACAAAC
        AAAFAQDMycUGAgHFwcAEAgLd3twAAgAABgAAEgq97ubB7ewABQYAAAC43Ka43qoAHAAABgAAAQHo4+QG
        AQDOysUODATT1MoFCQAECQAAAwCWl40HCAAAAQABAgAAAQAEBQPOzckEAwDV0dAUEA/a2NgAAADb4dwA
        DgcAEAi77ubB7ewABQYAAAC43Ka43qoAEwAADgPQ1NUAAADOzMsCBADP1coBCwDK1cUKEwYABACfn40R
        EQEAAwAFCQQABAAABAALDQfX1tIMCAfq5eYVEhTKzMwYHxoADgUADga77ufB7ewABQYAAAC43Ka536sA
        FgAACAAABQjU09UBAgDP080ACADJ1sYADAADDAANEgOjoo4QDgAHCwAGCwIOEgwCBADQ0c0CAADOycoP
        DA7Oy80PERHU3NUACgEAEAi77ue/7uwABQYAAAC43Ka43asCIAAACADMz9MDAALRzM0DAgDLzsUBCwDL
        2MoCCwAKDQAVEAGinY6bnZEFCQAICwIFBAAWEhHk3+AKBAnMyM0QDBHCxMQABQAAEAQAGg+77ubA7+0A
        BQYAAAC43Ka6360AEgAAEAUAAATw6ewLAALSysoKBwLR1s0DDQG/x7wHCQAJAwASDAEEAwAGBwAEBAAc
        GhnTzs8FAALd1t0EAAbT0tQAAQDZ4doAEwcADgO77ubA7+0ABQYAAAC43Ka84a8AGAAIFgvOzc8LAAPl
        1NgTAgXPw8MIBwPN0csDCgPc39YIBQAMBgEHAgAGAgEPCgvHxcUDAALLyModGR7R0NQOExLDyscCDQUA
        CAAAEAi77ue+7esABgcAAAC43aW54aoAGwAACAAHBgjr4OMWBQnWxckbDhDKxcYAAgDQ1tEAAwDJyMQj
        Hh3f2tsNCAnQy80PDA7V1dUKDAzMzs4AAgHCy8gBCwXJ1MoADAIADQS67ue/7uwABQYAAAC23qS05KIA
        JQADFgMAAgEKAwYTCg0LAgUGAQMIBwkAAAEAAwIGDQoGCQcAAAACAAAAAAAAAAAAAAAKDw0ABAAABgAJ
        Fg4IFQ0ACgAACgAAFAoAEgqy7ui97uwABQYAAAC236Gx5py16KUAFAAACwAABAAAAwAABwACEAQACQAA
        CgAAEQQACQAABAEAAAAAAAAAAwEACAIABQAACgAAEgMBIRAAEAEAEAIABwAABwAAEQau7eSu8Ou87u4A
        BQYAAAC24J+u6ZSv7Ja76qwAEgAADwAAGAAAEAC25Lay57Wy6bi26MAAGgAACQABAgAAAAAACAIADQC3
        58+x7NCu7tGt7tSs7det79yq7t2s7uKq7+Wi8Omm8Oy47u4ABQYAAAC24Z6u65Ct8I+w65qx6KO25qu0
        5qyw6ays7Kqn76mn8Kyp7bS06b4ACwAABwAABgAACQC26c2q7suj8M6g8dCh8dKg8dae8due8uCc8eOb
        8eeb8euj8O247u4ABQYAAAC24Z6u65Ct8I2r7pKr7pms7p2s7aGr7qOo76an8Kin8Kqm8LCp7rWt67uw
        67+v68Op6MGp7sml8Mqh8cyg8dCf8tKe8tae8dud8d+c8eOb8eeb8euj8O237e0ABQYAAAC24Z6u65Cr
        8Yyq8ZCq8ZSp8Zeo8Zuo8qCm8aOm8ael8aqk8a2j8bGj8bSi8bij8byj8sGi8cai8cqh8cye8tCd8tKd
        8tae8dud8d+c8eOb8eeb8euj8O237e0ABQYAAAC24Z6u65Cr8Yyq8ZGq8JWr8Zep8Jqn8Z+m8aOm8ael
        8aqk8a6j8LKj8bSi8bij8byj8sGi8cag8cqe8cue8s+d8dSd8die8dud8d+c8eOb8eeb8Oyj8O247u4A
        BgcAAAC24Z6u65Cr8Yyq8ZGq8JWr8Zeq8Zun8Z+m8aOm8ael8aqk8a6i8bKj8bSi8bih8byh8sGi8cag
        8cqf8sye8s+d8dSd8die8dud8d+c8eOb8eeb8euj8O247u4ABQYAAAC24Z6u65Cr8Yyq8ZCq8ZSp8Zeo
        8Zul8p6l8qGm8ael8aqi8q2i8rGj8bSi8bih8byh8sGi8cah8suf8sye8tCd8dSd8die8dud8d+c8eOb
        8eeb8euj8Oy47u4ABQYAAAC43qSy55ev7JSu7Zet7Zuu7J6t7aGr7aWq7air7ayq7a+p7bKn7rWo7rmn
        7ryo7r+o78So7smq8Myn7c6n79Gm79Wm79mn79um79+l7+Ok7+ek8eqs7+q97uwABAQAAAC92a653qa5
        5KW346a25Km35Ku146615bG15rS25be35bq25ry157+258G16MO26Ma36cu26c236dG46tK56ta46ti4
        7Nu469247OK37OO47OW37ei97OnK7OsAAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>